6. Page Replacement FCFS, LRU, Optimal

#include <stdio.h>

int search(int frame[], int n, int key) {
    for (int i = 0; i < n; i++)
        if (frame[i] == key)
            return 1;
    return 0;
}

int findLRU(int time[], int n) {
    int min = time[0], pos = 0;
    for (int i = 1; i < n; ++i) {
        if (time[i] < min) {
            min = time[i];
            pos = i;
        }
    }
    return pos;
}

int findOptimal(int pages[], int frame[], int n, int index, int f) {
    int farthest = index, pos = -1;
    for (int i = 0; i < f; i++) {
        int j;
        for (j = index + 1; j < n; j++) {
            if (frame[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    pos = i;
                }
                break;
            }
        }
        if (j == n)
            return i;
    }
    return (pos == -1) ? 0 : pos;
}

void fifo(int pages[], int n, int f) {
    printf("\n--- FIFO Page Replacement ---\n");
    int frame[f], index = 0, faults = 0;

    for (int i = 0; i < f; i++) frame[i] = -1;

    for (int i = 0; i < n; i++) {
        if (!search(frame, f, pages[i])) {
            frame[index] = pages[i];
            index = (index + 1) % f;
            faults++;
        }
        printf("Page %d => [", pages[i]);
        for (int j = 0; j < f; j++) {
            if (frame[j] == -1) printf(" - ");
            else printf(" %d ", frame[j]);
        }
        printf("]\n");
    }

    printf("Total Page Faults: %d\n", faults);
}

void lru(int pages[], int n, int f) {
    printf("\n--- LRU Page Replacement ---\n");
    int frame[f], time[f], count = 0, faults = 0;

    for (int i = 0; i < f; i++) {
        frame[i] = -1;
        time[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        if (!search(frame, f, pages[i])) {
            int pos = (count < f) ? count : findLRU(time, f);
            frame[pos] = pages[i];
            faults++;
        }
        time[(search(frame, f, pages[i])) ? findLRU(time, f) : count % f] = i;
        if (count < f) count++;

        printf("Page %d => [", pages[i]);
        for (int j = 0; j < f; j++) {
            if (frame[j] == -1) printf(" - ");
            else printf(" %d ", frame[j]);
        }
        printf("]\n");
    }

    printf("Total Page Faults: %d\n", faults);
}

void optimal(int pages[], int n, int f) {
    printf("\n--- Optimal Page Replacement ---\n");
    int frame[f], faults = 0;

    for (int i = 0; i < f; i++) frame[i] = -1;

    for (int i = 0; i < n; i++) {
        if (!search(frame, f, pages[i])) {
            int pos;
            if (i < f) {
                pos = i;
            } else {
                pos = findOptimal(pages, frame, n, i, f);
            }
            frame[pos] = pages[i];
            faults++;
        }

        printf("Page %d => [", pages[i]);
        for (int j = 0; j < f; j++) {
            if (frame[j] == -1) printf(" - ");
            else printf(" %d ", frame[j]);
        }
        printf("]\n");
    }

    printf("Total Page Faults: %d\n", faults);
}

int main() {
    int n, f;
    printf("Enter number of pages: ");
    scanf("%d", &n);

    int pages[n];
    printf("Enter the page reference string:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter number of frames: ");
    scanf("%d", &f);

    fifo(pages, n, f);
    lru(pages, n, f);
    optimal(pages, n, f);

    return 0;
}
