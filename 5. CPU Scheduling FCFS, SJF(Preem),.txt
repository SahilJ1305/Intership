5. CPU Scheduling FCFS, SJF(Preem), Priority(Non-preem), RoundRobin(Preem)

#include <stdio.h>
#include <limits.h>

typedef struct {
    int pid;
    int arrival;
    int burst;
    int remaining;
    int priority;
    int completion;
    int waiting;
    int turnaround;
    int started;
} Process;

void calculate_metrics(Process p[], int n) {
    for (int i = 0; i < n; i++) {
        p[i].turnaround = p[i].completion - p[i].arrival;
        p[i].waiting = p[i].turnaround - p[i].burst;
    }
}

void display_results(Process p[], int n) {
    printf("\nPID\tArrival\tBurst\tPriority\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\t\t%d\n",
               p[i].pid, p[i].arrival, p[i].burst, p[i].priority,
               p[i].completion, p[i].turnaround, p[i].waiting);
    }
}

void fcfs(Process p[], int n) {
    printf("\n--- FCFS Scheduling ---\n");
    int time = 0;
    for (int i = 0; i < n; i++) {
        if (time < p[i].arrival) time = p[i].arrival;
        time += p[i].burst;
        p[i].completion = time;
    }
    calculate_metrics(p, n);
    display_results(p, n);
}

void sjf_preemptive(Process p[], int n) {
    printf("\n--- SJF (Preemptive) Scheduling ---\n");
    int completed = 0, time = 0, shortest = -1;
    int min = INT_MAX;

    for (int i = 0; i < n; i++) p[i].remaining = p[i].burst;

    while (completed != n) {
        min = INT_MAX;
        shortest = -1;

        for (int i = 0; i < n; i++) {
            if (p[i].arrival <= time && p[i].remaining > 0 && p[i].remaining < min) {
                min = p[i].remaining;
                shortest = i;
            }
        }

        if (shortest == -1) {
            time++;
            continue;
        }

        p[shortest].remaining--;
        time++;

        if (p[shortest].remaining == 0) {
            completed++;
            p[shortest].completion = time;
        }
    }

    calculate_metrics(p, n);
    display_results(p, n);
}

void priority_non_preemptive(Process p[], int n) {
    printf("\n--- Priority (Non-Preemptive) Scheduling ---\n");
    int completed = 0, time = 0, idx;

    int done[100] = {0};

    while (completed < n) {
        int highest = INT_MAX;
        idx = -1;

        for (int i = 0; i < n; i++) {
            if (p[i].arrival <= time && !done[i]) {
                if (p[i].priority < highest) {
                    highest = p[i].priority;
                    idx = i;
                }
            }
        }

        if (idx == -1) {
            time++;
            continue;
        }

        time += p[idx].burst;
        p[idx].completion = time;
        done[idx] = 1;
        completed++;
    }

    calculate_metrics(p, n);
    display_results(p, n);
}

void round_robin(Process p[], int n, int quantum) {
    printf("\n--- Round Robin Scheduling (Quantum = %d) ---\n", quantum);
    int time = 0, done = 0;
    int queue[100], front = 0, rear = 0;
    int visited[100] = {0};

    for (int i = 0; i < n; i++) {
        p[i].remaining = p[i].burst;
        p[i].started = 0;
    }

    queue[rear++] = 0;
    visited[0] = 1;

    while (done < n) {
        int idx = queue[front++];
        if (p[idx].remaining > 0) {
            if (!p[idx].started) {
                p[idx].started = 1;
                if (time < p[idx].arrival) time = p[idx].arrival;
            }

            if (p[idx].remaining <= quantum) {
                time += p[idx].remaining;
                p[idx].remaining = 0;
                p[idx].completion = time;
                done++;
            } else {
                time += quantum;
                p[idx].remaining -= quantum;
            }

            for (int i = 0; i < n; i++) {
                if (i != idx && p[i].arrival <= time && !visited[i]) {
                    queue[rear++] = i;
                    visited[i] = 1;
                }
            }

            if (p[idx].remaining > 0) {
                queue[rear++] = idx;
            }
        }
    }

    calculate_metrics(p, n);
    display_results(p, n);
}

int main() {
    int n, quantum;
    Process p[100];

    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter Arrival Time, Burst Time, and Priority for each process:\n");
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Process %d: ", i + 1);
        scanf("%d %d %d", &p[i].arrival, &p[i].burst, &p[i].priority);
    }

    fcfs(p, n);
    sjf_preemptive(p, n);
    priority_non_preemptive(p, n);

    printf("\nEnter time quantum for Round Robin: ");
    scanf("%d", &quantum);
    round_robin(p, n, quantum);

    return 0;
}
